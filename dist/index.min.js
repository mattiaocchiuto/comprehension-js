!function(t,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("Comprehensions",[],r):"object"==typeof exports?exports.Comprehensions=r():t.Comprehensions=r()}(this,function(){return function(t){function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,r),i.loaded=!0,i.exports}var e={};return r.m=t,r.c=e,r.p="",r(0)}([function(t,r,e){t.exports=e(1)},function(module,exports){"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol?"symbol":typeof t};module.exports=function(){function _isInputSet(t){return t.indexOf("<-")!=-1}function _parseIfNum(t){return isNaN(parseInt(t))?t.trim():parseInt(t)}function completeArray(t){var r=1;if("string"!=typeof t)throw new TypeError('The "arrayString" parameter has to be a string.');if(PATTERNS.test("arrayString",t)&&(t=PATTERNS.extract("arrayString",t)),!PATTERNS.test("arrayStringToFill",t))return t.split(",").reduce(function(t,r){return t.push(_parseIfNum(r)),t},[]);var e=function(){var e=PATTERNS.extract("arrayStringToFill",t),n=void 0,i=void 0;if(e[0].indexOf(",")!=-1){var o=e[0].split(",");r=_parseIfNum(o[1])-_parseIfNum(o[0]),n=_parseIfNum(o[0])}return n=_parseIfNum(e[0]),i=_parseIfNum(e[1]),i<n?{v:[]}:{v:Array(i).fill(n).reduce(function(t,e){var n=t.lastElem?t.lastElem+r:e;return n<=i&&(t.result.push(n),t.lastElem=n),t},{result:[],lastElem:void 0}).result}}();return"object"===("undefined"==typeof e?"undefined":_typeof(e))?e.v:void 0}function formatComprehensions(outputExpression,otherArgs){function transformationFunction(input){if(!Array.isArray(input))throw new TypeError("The input value has to be an Array");var results=[],scope="";return input.map(function(val){var predicatesCondition=!1;scope="var "+varName+" = "+val+";",predicatesCondition=predicates.reduce(function(acc,predicate){return acc&&eval(scope+" "+predicate+";")},!0),predicatesCondition&&results.push(eval(scope+" "+outputExpression+";"))}),results}var inputSet=void 0,varName=void 0,rightSide=otherArgs.split(","),predicates=[];if(inputSet=rightSide.shift(),!_isInputSet(inputSet))throw new Error("You have to specify an input set.");if(varName=PATTERNS.extract("scopedVar",inputSet),rightSide.map(function(t){predicates.push(t)}),PATTERNS.test("inputSet",inputSet)){var inputSetParams=PATTERNS.extract("inputSet",inputSet),inputSetFormatted=completeArray(inputSetParams[1]);return transformationFunction(inputSetFormatted)}return transformationFunction}function comprehensions(t){if(t=t.replace(/ +/g,""),!PATTERNS.test("generalStructure",t))throw new Error("The input spec does not match any list comprehensions pattern");var r=PATTERNS.extract("generalStructure",t);return formatComprehensions(r[0],r[1])}var PATTERNS={generalStructure:{regExp:/\[(.*)\|((.*)(,?).*)\]/,outputString:"$1||$2||$3",splittingString:"||"},scopedVar:{regExp:/(\w)<-(.*)/,outputString:"$1"},inputSet:{regExp:/(.*)<-\[(.*)\]/,outputString:"$1||$2",splittingString:"||"},arrayString:{regExp:/\[(.*)\]/,outputString:"$1"},arrayStringToFill:{regExp:/(.*)\.\.(.*)/,outputString:"$1||$2",splittingString:"||"},test:function(t,r){return this[t].regExp.test(r)},extract:function(t,r){var e=this[t],n=e.regExp,i=e.outputString,o=e.splittingString,u=r.replace(n,i);return o?u.split(o):u}};return{comprehensions:comprehensions,completeArray:completeArray}}()}])});
//# sourceMappingURL=index.min.js.map